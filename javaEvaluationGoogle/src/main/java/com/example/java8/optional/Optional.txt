对Object进行了包装
    //创建一个空的Optional
	Optional<Insurance> insuranceOptional = Optional.<Insurance>empty();
	//通过该方法创建，不会出现空指针异常,对Insurance进行了封装
	Optional<Insurance> insuranceOptional2 = Optional.of(new Insurance());
	//对以上两种方法的集合
	Optional<Insurance> insuranceOptional3 = Optional.ofNullable(new Insurance());
	
	objectOptional.orElseGet(Insurance::new);//当参数为Supplier，可以使用函数推导
	
	objectOptional.orElse(new Insurance());//当参数为一个对象，直接使用new
	
	objectOptional.orElseThrow(RuntimeException::new);
	objectOptional.orElseThrow(()-> new RuntimeException("exception message...."));
	
	Insurance insurance = objectOptional.filter(i->i.getName()==null).get();
/**
 * @param insurance
 * @return
 */
private static String getInsuranceNameByOptional(Insurance insurance) {
   return Optional.ofNullable(insurance)
	        .map(i->i.getName())
	        .orElse("unknown");	        
}

******************************************************************
/**如果对象person中的属性是Optional<Car>
	 * Car中的属性是Optional<Insurance>
	 * 这里就应该使用Optional.flatMap
	 * @param person
	 * @return
	 */
	private static String getInsuranceNameByOptional(Person person) {
		return Optional.ofNullable(person)
		        .filter(i->i.getCar()!=null)
		        .map(i->i.getCar())
		        .filter(car->car.getInsurance()!=null)
		        .map(car->car.getInsurance().getName())
		        .orElse("unknown");
	}