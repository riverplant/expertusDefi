1.进程process和线程Thread:
进程:容器，把线程、内存和文件/网络句柄等相关的东西连在了一起(TCP/IP实现通信)
线程:栈,PC(下一条指令的地址Program count,放在内存中)(通过共享内存来实现通信)
缓冲区溢出:输入内容过长
TLS：thread local storage-->每个线程自己独立的内存

2.存储和寻址(慢---->快)
硬盘-->内存(关机清空)--->CPU(缓存)--->寄存器

寻址空间:进程中指针能寻找到的范围 
32位 ->2^32 = 4G
64位 ->2^64 = 10^19Bytes

int n = *p; -> MOV EAX,[EBX]//p指向一个地址，*p把指向这个地址的int型的数据读出,付给局部变量n

汇编： n->EAX  p->EBX

3.进程间通信:(独立内存由操作系统决定)
-->文件
-->Signal(linux: 1:HUP(hang up) 2:interrupt(ctr+C) 3: QUIT 9:KILL )
kill -9 tip
--->消息队列
-->管道(单向)/命名管道(单向/双向)   cat 显示文件内容  grep -e "key" 查找key字符串 --color
cat 文件 |(管道) grep -e "key" --color 
wc (统计):
cat demo.log | grep -e "error" --color | wc
结果:num1(行) num2(单词)  num3(字符)
--->共享内存
--->同步机制
--->Socket(最主要,不同机器):打开一个端口让其它进程访问，例如浏览器进程和远端服务器进程的通信
-------------------------------------------------------------------------
例题:有关线程的说法:
1.线程是程序的多个顺序的流动态执行
2.线程不能独立执行，必须依存在应用程序中，用应用程序提供多个线程执行控制

